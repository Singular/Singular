USAGE: change_cost [options] groebner_file new_cost_file



DESCRIPTION:

change_cost is a program for recomputing the reduced Groebner basis of
a toric ideal with respect to a term ordering with modified
weights. This can be used for varying the cost function in integer
programming (see the help for solve_IP for more information).
The program simply restarts Buchberger큦 algorithm on an already
computed toric ideal using the modified term ordering.



FILE FORMAT:

The first input file has to be a GROEBNER file; the second input file
should to be a NEW_COST file. For convenience, also MATRIX files are
accepted as second input files. For their format see the help for the
solve_IP or the toric_ideal program.

change_cost writes the new Groebner basis into a GROEBNER file named
like the second input file with extensions replaced by

	.GB.<alg>

where GB stands for GROEBNER and <alg> is the abbreviation of the
algorithm used for computing the input GROEBNER file (see the help for
solve_IP or toric_ideal for an explanation).

A GROEBNER file looks as follows:


  GROEBNER

  computed with algorithm:
  <algorithm name abbreviation>       (* abbreviations as above *)
  from file(s):                       (* the following four lines are
  <name of respective MATRIX file>       optional *)
  computation time:
  <computation time in seconds>

  term ordering:
  elimination block
  <number of elimination variables>
  <LEX / DEG_LEX                      (* only if number of elimination
  / DEG_REV_LEX>                         variables >0 *)
  weighted block
  <number of weighted variables>
  <W_LEX / W_REV_LEX                  (* number of weighted variables
  / W_DEG_LEX / W_DEG_REV_LEX>           should always be >0 *)
  <weight_vector>

  size:
  <number of elements>

  Groebner basis:
  <basis elements>

  <settings for the Buchberger
   algorithm and compiler settings>  (* optional *)


The Groebner basis consists always of binomials of the form x^a - x^b
where x^a and x^b are relatively prime. Such a binomial can be
represented by the vector a-b. The basis elements in the GROEBNER file
are given by the coefficients of this vector representation.
The settings for Buchberger큦 algorithm and the compiler flags are
produced when the GROEBNER file is generated by a call of solve_IP
with the verbose output option

	-v, --verbose

Example:


  GROEBNER

  computed with algorithm:
  du

  term ordering:
  elimination block:
  0
  weighted block:
  3
  W_LEX
  1 2 3

  size:
  1

  Groebner basis:
  2 3 -2			    (*  x^2 * y^3 - z^2  *)


A NEW_COST file should look as follows:


  NEW_COST

  variables:
  <number of weighted variables>

  cost vector:
  <coefficients of the new weight vector>



OPTIONS:

 -p         <number>      percentage of new generators to cause an
                          autoreduction during Buchberger큦 algorithm;
                          <number> may be an arbitrary float, a
                          negative value allows no intermediate
                          autoreductions
			  default is
                          -p 12.0

 -S [RP] [M] [B] [M] [2]  criteria to use in Buchberger큦 algorithm
                          for discarding unnecessary S-pairs
             RP           relatively prime leading terms
             M            Gebauer-Moeller criterion M
             F            Gebauer-Moeller criterion F
             B            Gebauer-Moeller criterion B
             2            Buchberger큦 second criterion
			  default is
                          -S RP M B

 -v,
--verbose                 verbose output mode; writes the settings for
                          Buchberger큦 algorithm and the compiler
                          flags into the output GROEBNER file

-V <number>,
--version <number>        version of Buchberger큦 algorithm to use;
                          <number> may be 1, 1a, 2 or 3
			  default is
                          -V 1

