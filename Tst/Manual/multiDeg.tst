LIB "tst.lib"; tst_init();
LIB "multigrading.lib";
ring r = 0,(x, y), dp;
intmat A[2][2] = 1, 0, 0, 1;
print(A);
intmat Ta[2][1] = 0, 3;
print(Ta);
//   attrib(A, "gradingGroup", Ta); // to think about
//  "poly:";
setBaseMultigrading(A);
multiDeg( x*x, A );
multiDeg( y*y*y, A );
setBaseMultigrading(A, Ta);
multiDeg( x*x*y );
multiDeg( y*y*y*x );
multiDeg( x*y + x + 1 );
multiDegPartition(x*y + x + 1);
print ( multiDeg(0) );
poly zero = 0;
print ( multiDeg(zero) );
//  "ideal:";
ideal I = y*x*x, x*y*y*y;
print( multiDeg(I) );
print ( multiDeg(ideal(0)) );
print ( multiDeg(ideal(0,0,0)) );
//  "vectors:";
intmat B[2][2] = 0, 1, 1, 0;
print(B);
multiDeg( setModuleGrading(y*y*y*gen(2), B ));
multiDeg( setModuleGrading(x*x*gen(1), B ));
vector V = x*gen(1) + y*gen(2);
V = setModuleGrading(V, B);
multiDeg( V );
vector v1 = setModuleGrading([0, 0, 0], B);
print( multiDeg( v1 ) );
vector v2 = setModuleGrading([0], B);
print( multiDeg( v2 ) );
//  "module:";
module D = x*gen(1), y*gen(2);
D;
D = setModuleGrading(D, B);
print( multiDeg( D ) );
module DD = [0, 0],[0, 0, 0];
DD = setModuleGrading(DD, B);
print( multiDeg( DD ) );
module DDD = [0, 0];
DDD = setModuleGrading(DDD, B);
print( multiDeg( DDD ) );
tst_status(1);$
