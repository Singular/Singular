name: Run Sage CI for Linux/Cygwin/macOS

## This GitHub Actions workflow provides:
##
##  - portability testing, by building and testing this project on many platforms
##    (Linux variants and Cygwin), each with two configurations (installed packages),
##
##  - continuous integration, by building and testing other software
##    that depends on this project.
##
## It runs on every pull request and push of a tag to the GitHub repository.
##
## The testing can be monitored in the "Actions" tab of the GitHub repository.
##
## After all jobs have finished (or are canceled) and a short delay,
## tar files of all logs are made available as "build artifacts".
##
## This GitHub Actions workflow uses the portability testing framework
## of SageMath (https://www.sagemath.org/).  For more information, see
## https://doc.sagemath.org/html/en/developer/portability_testing.html

## The workflow consists of two jobs:
##
##  - First, it builds a source distribution of the project
##    and generates a script "update-pkgs.sh".  It uploads them
##    as a build artifact named upstream.
##
##  - Second, it checks out a copy of the SageMath source tree.
##    It downloads the upstream artifact and replaces the project's
##    package in the SageMath distribution by the newly packaged one
##    from the upstream artifact, by running the script "update-pkgs.sh".
##    Then it builds a small portion of the Sage distribution.
##
## Many copies of the second step are run in parallel for each of the tested
## systems/configurations.

#on: [push, pull_request]

on:
  pull_request:
    types: [opened, synchronize]
  push:
    tags:
      - '*'
  workflow_dispatch:
    # Allow to run manually

concurrency:
  # Cancel previous runs of this workflow for the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Ubuntu packages to install so that the project's "make dist" can succeed
  DIST_PREREQ: libcdd-dev
  # Name of this project in the Sage distribution
  SPKG:        singular
  # Sage distribution packages to build
  TARGETS_PRE: build/make/Makefile
  TARGETS:     SAGE_CHECK=no SAGE_CHECK_PACKAGES=singular singular
  TARGETS_OPTIONAL: SAGE_CHECK=no SAGE_CHECK_pysingular=warn pysingular
  # Need texinfo for building the Singular documentation
  EXTRA_SAGE_PACKAGES: info
  # Standard setting: Test the current beta release of Sage:
  SAGE_REPO:   sagemath/sage
  SAGE_REF:    develop
  REMOVE_PATCHES: "*"

jobs:

  dist:
    runs-on: ubuntu-latest
    steps:
      - name: Check out ${{ env.SPKG }}
        uses: actions/checkout@v3
        with:
          path: build/pkgs/${{ env.SPKG }}/src
      - name: Install prerequisites
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $DIST_PREREQ
      - name: Run make dist, prepare upstream artifact
        run: |
          (cd build/pkgs/${{ env.SPKG }}/src && (./autogen.sh && ./configure && make dist) ) \
          && mkdir -p upstream && cp build/pkgs/${{ env.SPKG }}/src/*.tar.gz upstream/${{ env.SPKG }}-git.tar.gz \
          && echo "sage-package create ${{ env.SPKG }} --version git --tarball ${{ env.SPKG }}-git.tar.gz --type=optional" > upstream/update-pkgs.sh \
          && if [ -n "${{ env.REMOVE_PATCHES }}" ]; then echo "(cd ../build/pkgs/${{ env.SPKG }}/patches && rm -f ${{ env.REMOVE_PATCHES }}; :)" >> upstream/update-pkgs.sh; fi \
          && echo 'echo ntl flint readline mpfr cddlib 4ti2 > ../build/pkgs/singular/dependencies' >> upstream/update-pkgs.sh \
          && ls -l upstream/
      - uses: actions/upload-artifact@v3
        with:
          path: upstream
          name: upstream

  kanarienvogel:
    uses: sagemath/sage/.github/workflows/docker.yml@develop
    with:
      tox_system_factors: >-
        ["ubuntu-jammy"]
      tox_packages_factors: >-
        ["standard"]
      # Extra system packages to install. See available packages at
      # https://github.com/sagemath/sage/tree/develop/build/pkgs
      extra_sage_packages: "info"
      # Sage distribution packages to build
      targets: SAGE_CHECK=no SAGE_CHECK_PACKAGES=singular singular
      targets_optional: SAGE_CHECK=no SAGE_CHECK_pysingular=warn pysingular
      # Standard setting: Test the current beta release of Sage:
      sage_repo: sagemath/sage
      sage_ref: develop
      upstream_artifact: upstream
      # Docker targets (stages) to tag
      docker_targets: "with-targets"
      # We prefix the image name with the SPKG name ("singular_") to avoid the error
      # 'Package "sage-docker-..." is already associated with another repository.'
      docker_push_repository: ghcr.io/${{ github.repository }}/singular_
    needs: [dist]

  schwanenfenster:
    env:
      STAGE: i-a
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      MAKE: make -j8
      SAGE_NUM_THREADS: 3
      SAGE_CHECK: yes
      SAGE_CHECK_PACKAGES: "!cython,!r,!python3,!python2,!nose,!pathpy,!gap,!cysignals,!linbox,!git,!ppl"
      CYGWIN: winsymlinks:native
      CONFIGURE_ARGS: --enable-experimental-packages --enable-download-from-upstream-url
      SAGE_FAT_BINARY: yes
      SAGE_LOCAL: /opt/sage-singular-${{ github.sha }}

    runs-on: windows-latest

    needs: [dist]

    strategy:
      fail-fast: false
      matrix:
        pkgs: [minimal, standard]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - name: install cygwin with choco
      shell: bash {0}
      run: |
        choco --version
        choco install git python3 --source cygwin
    - name: Check out SageMath
      uses: actions/checkout@v3
      with:
        repository: ${{ env.SAGE_REPO }}
        ref: ${{ env.SAGE_REF }}
        fetch-depth: 2000
      if: env.SAGE_REPO != ''
    - uses: actions/download-artifact@v3
      with:
        path: upstream
        name: upstream
    - name: install minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES="python38 python38-pip"
        choco install $PACKAGES --source cygwin
    - name: Update Sage packages from upstream artifact
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && ls -l upstream/ && export PATH="$(pwd)/build/bin:$PATH:/usr/local/bin:/usr/bin" && (cd upstream && bash -x update-pkgs.sh) && git diff'
    - name: tox
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'python3.8 -m pip install tox'
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && PREFIX="${{ env.SAGE_LOCAL }}" tox -e local-cygwin-choco-${{ matrix.pkgs }} -- $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a || tar -c --ignore-failed-read -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a)-save.tar" $a ; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v3
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the $SAGE_LOCAL/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f "${{ env.SAGE_LOCAL }}"/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --remove-files "${{ env.SAGE_LOCAL }}"'
      if: always()
    - uses: actions/upload-artifact@v3
      # upload-artifact@v2 does not support whitespace in file names.
      # so we tar up the directory ourselves
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()

  docker:
    uses: sagemath/sage/.github/workflows/docker.yml@develop
    with:
      # Extra system packages to install. See available packages at
      # https://github.com/sagemath/sage/tree/develop/build/pkgs
      extra_sage_packages: "info"
      # Sage distribution packages to build
      targets: SAGE_CHECK=no SAGE_CHECK_PACKAGES=singular singular
      targets_optional: SAGE_CHECK=no SAGE_CHECK_pysingular=warn pysingular
      # Standard setting: Test the current beta release of Sage:
      sage_repo: sagemath/sage
      sage_ref: develop
      upstream_artifact: upstream
      # Docker targets (stages) to tag
      docker_targets: "with-targets"
      # We prefix the image name with the SPKG name ("singular_") to avoid the error
      # 'Package "sage-docker-..." is already associated with another repository.'
      docker_push_repository: ghcr.io/${{ github.repository }}/singular_
    needs: [dist, kanarienvogel]

  macos:
    uses: sagemath/sage/.github/workflows/macos.yml@develop
    with:
      osversion_xcodeversion_toxenv_tuples: >-
        [["latest", "",           "homebrew-macos-usrlocal-minimal"],
         ["latest", "",           "homebrew-macos-usrlocal-standard"],
         ["13",     "xcode_15.0", "homebrew-macos-usrlocal-standard"]]
      targets: SAGE_CHECK=no SAGE_CHECK_PACKAGES=singular singular
      targets_optional: SAGE_CHECK=no SAGE_CHECK_pysingular=warn pysingular
      sage_repo:         sagemath/sage
      sage_ref:          develop
      upstream_artifact: upstream
    needs: [dist, kanarienvogel]
