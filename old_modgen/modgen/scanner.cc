/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /exports/cvsroot-2/cvsroot/modules/modgen/scanner.cc,v 1.5 2007-09-12 09:31:40 Singular Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
static yyconst short int yy_accept[384] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   58,   58,   64,   64,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,  100,   13,   14,  100,   18,  100,   17,
      100,   10,   16,   15,  100,  100,  100,    7,  100,  100,
       19,   19,   19,  100,   25,  100,  100,   96,   91,   93,
       96,   88,   89,   90,   96,   87,   95,   92,   23,   22,
       23,   23,   86,   83,   86,   85,   80,   84,   86,   81,
       82,   34,   33,   34,   32,   77,   76,   77,   75,   27,

       26,   27,   30,   27,   43,   36,   35,   43,   43,   43,
       37,   43,   43,   43,   43,   52,   45,   44,   52,   52,
       52,   46,   51,   51,   51,   52,   58,   57,   58,   58,
       58,   73,   66,   73,   62,   70,   67,   68,   69,   73,
       63,   64,   72,   71,   65,   65,   65,   59,   56,   54,
       53,   56,   55,   99,   99,   98,   99,   97,   13,   15,
       14,    6,    0,    0,    0,   15,   15,    0,    0,   10,
        0,    7,    5,    0,    0,    0,    0,    8,   19,   10,
       19,    0,   25,    0,    0,   91,   87,   93,   94,   92,
       22,    0,   83,   78,    0,   33,   31,   76,   74,   26,

       29,   28,   36,   35,   38,    0,    0,    0,    0,   45,
       44,   47,    0,   51,   51,   51,   58,   58,   57,    6,
       58,   58,    5,   58,   58,   66,   60,    0,   64,   65,
       63,   65,   54,   53,    0,   97,   98,   15,    6,    0,
        0,    0,    9,    0,   20,   20,    5,    0,    0,    0,
        0,   11,    0,    0,    0,   21,    0,    0,   79,    0,
        0,   39,    0,    0,    0,    0,    0,   48,    0,   51,
       51,    6,   58,   58,    5,   58,   58,    0,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
       51,   58,   58,   58,   58,    0,    0,    0,    0,    0,

        0,    0,   40,    0,   51,   51,   58,   58,   58,   58,
        0,    0,    0,    0,    0,    0,    0,   42,   51,   50,
       58,   58,   58,   58,    0,    0,    0,    0,    0,    0,
       41,   49,   58,   58,   58,   58,    0,    0,    0,    0,
        0,    0,   58,   58,   58,   58,    2,    0,    1,    0,
        0,    0,    2,   58,    1,   58,    2,    0,    1,    0,
        0,    0,    2,   58,    1,   58,    4,    0,    3,    0,
        4,    3,    4,    0,   12,    0,    3,    0,   24,    0,
        4,    3,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    8,    1,    1,    9,
       10,   11,    1,   12,   13,   14,   15,   16,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,    1,
       20,    1,    1,    1,   21,   21,   22,   21,   23,   21,
       21,   21,   21,   21,   21,   21,   21,   24,   25,   21,
       21,   21,   26,   21,   21,   21,   21,   21,   27,   21,
        1,   28,    1,    1,   21,    1,   29,   21,   30,   31,

       32,   21,   33,   34,   35,   21,   21,   36,   37,   38,
       39,   40,   21,   41,   42,   43,   44,   21,   21,   45,
       27,   21,   46,    1,   47,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[48] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    1,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[423] =
    {   0,
        0,   47,    0,    0,   92,   94,  102,    0,   96,  147,
      153,  198,    0,    0,  149,  159,  161,  163,  177,  181,
      244,  285,  327,  845,  174,  185,  374,    0,  192,  212,
      216,  220,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  852,  854,  171,  854,  848,  854,  186,  854,
      835,  854,  854,  231,  835,  215,  218,  251,  235,  160,
      834,  241,  246,  207,  854,  224,  264,  854,  260,  854,
      844,  854,  854,  854,  828,  854,  854,    0,  854,  854,
      842,  797,  854,  854,  840,  854,  854,  854,  175,  854,
      854,  854,  854,  839,  826,  854,  854,  837,  824,  854,

      854,  835,  854,  236,  854,  229,  854,  834,  251,  259,
      854,  791,  794,  791,  272,  854,  280,  854,  830,  273,
      286,  854,    0,  787,  788,  280,  827,  854,  826,  419,
      420,  854,  854,  825,  854,  854,  854,  854,  854,  292,
      292,  294,  854,  854,    0,  280,  175,  854,  854,  313,
      854,  824,  854,  854,  424,  854,  823,  854,  428,  429,
      854,    0,  790,  783,  318,  321,  430,  809,  394,  808,
      411,  434,    0,  786,  781,  778,  448,  854,  804,  803,
      430,  454,  854,  458,  460,  463,  854,  854,  854,    0,
      854,  463,  854,  854,  466,  854,  854,  854,  854,  854,

      854,  854,  469,  854,  854,  472,  787,  776,  785,  475,
      854,  854,  475,    0,  784,  783,  808,  854,  854,  807,
      289,  151,  806,  452,  444,  854,  854,  480,  472,    0,
        0,  455,  488,  854,  489,  854,  854,  490,    0,  770,
      768,  496,  854,  498,  776,  854,    0,  767,  773,  764,
      500,  854,  502,  506,  508,  854,  510,  512,  854,  514,
      516,  854,  518,  765,  771,  757,  520,  854,  522,  762,
      755,  794,  435,  493,  793,  504,  524,  525,  854,  527,
      762,  764,  760,  757,  761,  530,  750,  534,  754,  748,
      752,  535,  532,  537,  541,  742,  753,  740,  745,  750,

      542,  745,  545,  750,  743,  748,  538,  540,  545,  546,
      741,  745,  739,  739,  742,  548,  740,  854,  739,    0,
      280,  550,  551,  553,  741,  725,  739,  710,  701,  554,
      854,    0,  556,  552,  557,  558,  692,  688,  652,  650,
      585,  563,  566,  570,  571,  572,    0,  592,    0,  594,
      590,  587,  618,  573,  614,  574,    0,  568,    0,  565,
      444,  589,  437,  576,  424,  585,    0,  591,    0,  596,
      311,  240,    0,  600,  854,  605,    0,  611,  854,  616,
      234,  227,  854,  627,  631,  635,  639,  643,  647,  651,
      655,  659,  663,  667,  669,  671,  675,  176,  166,  679,

       98,  683,  687,  691,  695,  699,  703,  707,  711,  715,
      719,  723,  727,  731,  735,  739,  743,  747,  751,  755,
      759,  763
    } ;

static yyconst short int yy_def[423] =
    {   0,
      383,  383,  384,  384,  385,  385,  383,    7,  386,  386,
      387,  387,  384,  384,  388,  388,  389,  389,  390,  390,
      391,  391,  383,   23,  392,  392,  383,   27,  393,  393,
      394,  394,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  395,  395,  395,  383,  383,  383,
      396,  396,  396,  397,  383,  397,  397,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  398,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  399,  399,  399,  383,  400,  383,  400,  400,
      400,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  401,  401,  401,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  402,  383,  383,  403,  383,  383,  395,  383,  395,
      395,  383,  404,  383,  383,  383,  405,  383,  396,  396,
      396,  397,  383,  397,  397,  383,  383,  383,  383,  398,
      383,  406,  383,  383,  407,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  408,  383,  383,  383,  383,
      383,  383,  409,  399,  399,  399,  400,  383,  383,  410,
      400,  400,  411,  400,  400,  383,  383,  412,  383,  401,
      401,  401,  383,  383,  383,  383,  383,  383,  402,  383,
      383,  403,  383,  403,  383,  383,  404,  383,  383,  383,
      405,  383,  405,  397,  406,  383,  406,  407,  383,  407,
      408,  383,  408,  383,  383,  383,  409,  383,  409,  399,
      399,  410,  400,  400,  411,  400,  400,  412,  383,  412,
      383,  383,  383,  383,  383,  397,  383,  383,  383,  399,
      399,  400,  400,  400,  400,  383,  383,  383,  383,  383,

      397,  383,  383,  383,  399,  399,  400,  400,  400,  400,
      383,  383,  383,  383,  383,  397,  383,  383,  399,  399,
      400,  400,  400,  400,  383,  383,  383,  383,  383,  397,
      383,  399,  400,  400,  400,  400,  383,  383,  383,  383,
      383,  397,  400,  400,  400,  400,  413,  383,  414,  383,
      383,  397,  415,  400,  416,  400,  413,  383,  414,  383,
      383,  397,  415,  400,  416,  400,  417,  418,  419,  420,
      421,  422,  417,  418,  383,  418,  419,  420,  383,  420,
      421,  422,    0,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383
    } ;

static yyconst short int yy_nxt[902] =
    {   0,
       44,   45,   46,   47,   45,   48,   44,   49,   44,   44,
       44,   50,   44,   44,   51,   52,   44,   44,   53,   54,
       55,   55,   55,   56,   55,   55,   57,   44,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   56,   55,   55,
       55,   55,   55,   55,   55,   44,   44,   44,   58,   46,
       47,   58,   48,   44,   59,   44,   44,   44,   50,   44,
       44,   60,   52,   44,   44,   53,   54,   61,   61,   61,
       62,   61,   61,   63,   44,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   62,   61,   61,   61,   61,   61,
       61,   61,   44,   44,   65,   66,   65,   66,   80,   81,

      230,   67,   68,   69,   70,   71,   69,   68,   68,   68,
       72,   73,   68,   74,   68,   68,   68,   68,   68,   75,
       76,   77,   78,   78,   78,   78,   78,   78,   78,   68,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   68,   68,   80,
       81,   93,   94,  218,   82,   84,   85,   86,   87,   95,
       88,   93,   94,   97,   98,   97,   98,   89,  214,   95,
      178,   99,  159,   99,  165,  159,  128,  129,  190,  101,
      102,  130,  103,  101,  102,  194,  103,  128,  129,  195,
      160,  274,  131,  150,  151,  152,  150,  232,   90,   91,

       84,   85,   86,   87,  104,   88,  232,  162,  104,  183,
      184,  163,   89,  150,  151,  152,  150,  155,  156,  157,
      155,  155,  156,  157,  155,  164,  183,  184,  169,  218,
      203,  169,  166,  203,  158,  166,  218,  153,  158,  170,
      171,  201,  218,   90,   91,  106,  107,  108,  106,  171,
      167,  109,  172,  170,  169,  172,  173,  153,  110,  169,
      174,  186,  111,  202,  186,  180,  183,  184,  181,  205,
      160,  175,  162,  206,  176,  112,  163,  181,  187,  180,
      177,  210,  218,  113,  210,  114,  106,  107,  108,  106,
      164,  218,  115,  173,  162,  185,  212,  174,  163,  110,

      213,  173,  227,  111,  231,  174,  228,  229,  229,  229,
      229,  176,  164,  218,  233,  333,  112,  233,  231,  176,
      243,  244,  166,  273,  113,  166,  114,  116,  117,  118,
      119,  117,  116,  116,  120,  116,  116,  116,  116,  116,
      116,  121,  116,  116,  116,  122,  116,  123,  123,  123,
      123,  123,  123,  123,  116,  123,  123,  123,  124,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  125,  123,
      123,  123,  116,  116,  132,  132,  133,  134,  132,  135,
      136,  132,  137,  138,  132,  139,  132,  132,  140,  141,
      142,  132,  143,  144,  145,  145,  145,  146,  145,  145,

      147,  132,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  146,  145,  145,  145,  145,  145,  145,  145,  148,
      132,  218,  218,  245,  169,  235,  218,  246,  235,  159,
      238,  166,  159,  238,  166,  172,  170,  218,  172,  218,
      220,  223,  236,  169,  221,  224,  218,  160,  160,  167,
      252,  253,  170,  160,  218,  180,  183,  184,  222,  225,
      183,  184,  183,  184,  186,  256,  257,  186,  259,  260,
      203,  180,  292,  203,  262,  263,  210,  268,  269,  210,
      231,  187,  279,  280,  277,  369,  276,  229,  229,  233,
      235,  238,  233,  235,  238,  218,  231,  254,  243,  244,

      243,  244,  252,  253,  252,  253,  218,  236,  183,  184,
      256,  257,  256,  257,  259,  260,  259,  260,  262,  263,
      262,  263,  268,  269,  268,  269,  218,  279,  280,  279,
      280,  293,  183,  184,  218,  303,  286,  218,  303,  218,
      218,  294,  218,  218,  183,  184,  303,  218,  218,  303,
      183,  184,  218,  218,  218,  218,  183,  184,  218,  218,
      218,  308,  295,  288,  301,  183,  184,  307,  218,  309,
      310,  322,  218,  218,  218,  218,  218,  324,  218,  316,
      334,  321,  330,  336,  343,  345,  335,  218,  323,  183,
      184,  183,  184,  375,  376,  344,  342,  352,  379,  380,

      368,  346,  375,  376,  364,  366,  353,  375,  376,  367,
      354,  355,  356,  379,  380,  362,  218,  371,  379,  380,
      218,  361,  360,  358,  370,  351,  372,   44,   44,   44,
       44,   64,   64,   64,   64,   79,   79,   79,   79,   83,
       83,   83,   83,   92,   92,   92,   92,   96,   96,   96,
       96,  100,  100,  100,  100,  105,  105,  105,  105,  127,
      127,  127,  127,  149,  149,  149,  149,  154,  154,  154,
      154,  168,  168,  179,  179,  182,  182,  182,  182,  217,
      217,  217,  217,  239,  350,  239,  239,  242,  242,  242,
      242,  247,  349,  247,  247,  251,  251,  251,  251,  255,

      255,  255,  255,  258,  258,  258,  258,  261,  261,  261,
      261,  267,  267,  267,  267,  272,  272,  272,  272,  275,
      275,  275,  275,  278,  278,  278,  278,  357,  348,  357,
      357,  359,  347,  359,  359,  363,  363,  363,  363,  365,
      365,  365,  365,  373,  341,  373,  373,  374,  374,  374,
      374,  377,  340,  377,  377,  378,  378,  378,  378,  381,
      381,  381,  381,  382,  382,  382,  382,  339,  338,  337,
      332,  331,  329,  328,  327,  326,  325,  320,  319,  318,
      317,  315,  314,  313,  312,  311,  306,  305,  304,  302,
      300,  299,  298,  297,  296,  218,  218,  291,  290,  289,

      288,  287,  285,  284,  283,  246,  282,  281,  218,  218,
      218,  271,  270,  266,  265,  264,  169,  169,  250,  249,
      248,  169,  169,  241,  240,  237,  234,  226,  219,  218,
      216,  215,  211,  209,  208,  207,  204,  200,  199,  198,
      197,  196,  193,  192,  191,  189,  188,  169,  169,  165,
      161,  383,  126,   43,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383
    } ;

static yyconst short int yy_chk[902] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    5,    5,    6,    6,    9,    9,

      401,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,   10,
       10,   15,   15,  222,   10,   11,   11,   11,   11,   15,
       11,   16,   16,   17,   17,   18,   18,   11,  399,   16,
       60,   17,   45,   18,   60,   45,   25,   25,  398,   19,
       19,   25,   19,   20,   20,   89,   20,   26,   26,   89,
       45,  222,   26,   29,   29,   29,   29,  147,   11,   11,

       12,   12,   12,   12,   19,   12,  147,   49,   20,   64,
       64,   49,   12,   30,   30,   30,   30,   31,   31,   31,
       31,   32,   32,   32,   32,   49,   66,   66,   56,  382,
      106,   57,   54,  106,   31,   54,  381,   29,   32,   56,
       57,  104,  372,   12,   12,   21,   21,   21,   21,   57,
       54,   21,   58,   56,   62,   58,   59,   30,   21,   63,
       59,   69,   21,  104,   69,   62,   67,   67,   63,  110,
       58,   59,  109,  110,   59,   21,  109,   63,   69,   62,
       59,  117,  321,   21,  117,   21,   22,   22,   22,   22,
      109,  221,   22,  115,  120,   67,  121,  115,  120,   22,

      121,  126,  140,   22,  146,  126,  140,  141,  141,  142,
      142,  115,  120,  371,  150,  321,   22,  150,  146,  126,
      165,  165,  166,  221,   22,  166,   22,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  130,  131,  169,  171,  155,  365,  169,  155,  159,
      160,  167,  159,  160,  167,  172,  171,  273,  172,  363,
      130,  131,  155,  181,  130,  131,  225,  159,  160,  167,
      177,  177,  171,  172,  224,  181,  182,  182,  130,  131,
      184,  184,  185,  185,  186,  192,  192,  186,  195,  195,
      203,  181,  273,  203,  206,  206,  210,  213,  213,  210,
      232,  186,  228,  228,  225,  361,  224,  229,  229,  233,
      235,  238,  233,  235,  238,  274,  232,  185,  242,  242,

      244,  244,  251,  251,  253,  253,  276,  235,  254,  254,
      255,  255,  257,  257,  258,  258,  260,  260,  261,  261,
      263,  263,  267,  267,  269,  269,  277,  278,  278,  280,
      280,  274,  286,  286,  293,  288,  254,  292,  288,  294,
      307,  276,  308,  295,  301,  301,  303,  309,  310,  303,
      316,  316,  322,  323,  334,  324,  330,  330,  333,  335,
      336,  293,  277,  288,  286,  342,  342,  292,  343,  294,
      295,  308,  344,  345,  346,  354,  356,  310,  364,  301,
      322,  307,  316,  324,  333,  335,  323,  366,  309,  352,
      352,  362,  362,  368,  368,  334,  330,  342,  370,  370,

      360,  336,  374,  374,  354,  356,  343,  376,  376,  358,
      344,  345,  346,  378,  378,  352,  355,  364,  380,  380,
      353,  351,  350,  348,  362,  341,  366,  384,  384,  384,
      384,  385,  385,  385,  385,  386,  386,  386,  386,  387,
      387,  387,  387,  388,  388,  388,  388,  389,  389,  389,
      389,  390,  390,  390,  390,  391,  391,  391,  391,  392,
      392,  392,  392,  393,  393,  393,  393,  394,  394,  394,
      394,  395,  395,  396,  396,  397,  397,  397,  397,  400,
      400,  400,  400,  402,  340,  402,  402,  403,  403,  403,
      403,  404,  339,  404,  404,  405,  405,  405,  405,  406,

      406,  406,  406,  407,  407,  407,  407,  408,  408,  408,
      408,  409,  409,  409,  409,  410,  410,  410,  410,  411,
      411,  411,  411,  412,  412,  412,  412,  413,  338,  413,
      413,  414,  337,  414,  414,  415,  415,  415,  415,  416,
      416,  416,  416,  417,  329,  417,  417,  418,  418,  418,
      418,  419,  328,  419,  419,  420,  420,  420,  420,  421,
      421,  421,  421,  422,  422,  422,  422,  327,  326,  325,
      319,  317,  315,  314,  313,  312,  311,  306,  305,  304,
      302,  300,  299,  298,  297,  296,  291,  290,  289,  287,
      285,  284,  283,  282,  281,  275,  272,  271,  270,  266,

      265,  264,  250,  249,  248,  245,  241,  240,  223,  220,
      217,  216,  215,  209,  208,  207,  180,  179,  176,  175,
      174,  170,  168,  164,  163,  157,  152,  134,  129,  127,
      125,  124,  119,  114,  113,  112,  108,  102,   99,   98,
       95,   94,   85,   82,   81,   75,   71,   61,   55,   51,
       47,   43,   24,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define INITIAL 0
#line 2 "scanner.l"
/****************************************
*  Computer Algebra System SINGULAR     *
****************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "modgen.h"
#include "stype.h"
#include "../../Singular/grammar.h"
#include "mod_grammar.h"

#define DEBUG 3
 
#  define YYLP_ERR_NONE    0
#  define YYLP_DEF_BR2     1
#  define YYLP_BODY_BR2    2
#  define YYLP_BODY_BR3    3
#  define YYLP_BODY_TMBR2  4
#  define YYLP_BODY_TMBR3  5
#  define YYLP_EX_BR2      6
#  define YYLP_EX_BR3      7
#  define YYLP_BAD_CHAR    8
#  define YYLP_MISSQUOT    9
#  define YYLP_MISS_BR1   10
#  define YYLP_MISS_BR2   11
#  define YYLP_MISS_BR3   12

  extern int iseof;

  int offset = 0;
  int yylineno = 1;
  int do_return = 0;

  int state_level = -1;
  int state_max = 0;
  char *yylp_buffer_start;

  extern int sectnum;
  static int oldsectnum = 1;
  extern moddef module_def;
  extern procdef procedure_decl;

  char *sectname[] = { "sect -0", "section 1",
                       "Singular", "procedures", "C-part" 
  };
  
  struct _states {
    char name[32];
    int state;
  } * old_states = NULL;
/*  int *old_states = NULL;*/

  int current_pos(int i);
  int read_string(char **buffer, long *start, long end);
  int libread(FILE* f, char* buf, int max_size);
  void add_action(char *new_text);
 
  void push_state(int state, int new_state, char *name);
  void switch_state(int state, int new_state, char *name);
  void pop_state();
  int return_sect_token(int passed, int old_sect, int new_sect);
  extern int init_modgen(moddef *module_def, char *filename);
 
static char * dupyytext()
{
  if (yyleng>0) yytext[yyleng-1] = '\0';
  return strdup((char *)yytext);
}

#   undef YY_DECL
#   define YY_DECL int yylex(YYSTYPE* lvalp)

#   undef YY_INPUT
#   define YY_INPUT(buf,result,max_size) \
          if ( ((result = libread( (yyin), (char *) buf, max_size )) < 0 ) \
                  && ferror( yyin ) ) \
                YY_FATAL_ERROR( "read in flex scanner failed" );

#   undef yywrap
  extern "C"
  {
  int yywrap();
  }

#define ACTION_ECHO add_action( yytext )

/* %start START */
#define preamble 1

#define MODINITIAL 2

#define PROCCMDBLOCK 3

#define CODEBLOCK 4

#define CODEBLOCK2 5

#define module 6

#define COMMENT 7

#define COMMENTB 8

#define STRING 9

#define SECT2 10

#define SECT3 11

#define SECT4 12

#define PROCDECL 13

#define EXAMPLE 14

#define ANYLINE 15

#define pdef 16

#define procopt 17

#define procdef 18

#define ctext 19

#define cstring 20


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 149 "scanner.l"

       static int brace1 = 0;  /* { } */
       static int brace2 = 0;  /* ( ) */
       static int brace3 = 0;  /* [ ] */
       static int quote  = 0;  /* " */


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 384 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 854 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENTB):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(INITIAL):
#line 155 "scanner.l"
{
          printf( "EOF encountered inside an action\n");
	  printf("ERRRRROOOOORRR\n");
                 }
	YY_BREAK

case 1:
YY_RULE_SETUP
#line 161 "scanner.l"
{
                  int passed = (oldsectnum == sectnum) ? 0 : 1;
                  int old_sect = sectnum;

                  oldsectnum = sectnum;
                  sectnum = 2;
                  if(!passed) yyless(0);
                  else push_state(YYSTATE, SECT2, "SECT2");
                  return(return_sect_token(passed, old_sect, sectnum));
                }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 171 "scanner.l"
{
                  int passed = (oldsectnum == sectnum) ? 0 : 1;
                  int old_sect = sectnum;

                  oldsectnum = sectnum;
                  sectnum = 2;
                  if(!passed) yyless(0);
                  else push_state(YYSTATE, SECT2, "SECT2");
                  return(return_sect_token(passed, old_sect, sectnum));
                }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 181 "scanner.l"
{ 
                  int passed = (oldsectnum == sectnum) ? 0 : 1;
                  int old_sect = sectnum;

                  oldsectnum = sectnum;
                  sectnum = 3;
                  if(!passed) yyless(0);
                  else push_state(YYSTATE, SECT3, "SECT3");
                  return(return_sect_token(passed, old_sect, sectnum));
                }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 191 "scanner.l"
{ 
                  int passed = (oldsectnum == sectnum) ? 0 : 1;
                  int old_sect = sectnum;

                  oldsectnum = sectnum;
                  sectnum = 3;
                  if(!passed) yyless(0);
                  else push_state(YYSTATE, SECT3, "SECT3");
                  return(return_sect_token(passed, old_sect, sectnum));
                }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 201 "scanner.l"
{ 
                  int passed = (oldsectnum == sectnum) ? 0 : 1;
                  int old_sect = sectnum;

                  oldsectnum = sectnum;
                  sectnum = 4;
                  if(!passed) yyless(0);
                  else push_state(YYSTATE, SECT4, "SECT4");
                  return(return_sect_token(passed, old_sect, sectnum));
                }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 211 "scanner.l"
{ 
                  int passed = (oldsectnum == sectnum) ? 0 : 1;
                  int old_sect = sectnum;

                  oldsectnum = sectnum;
                  sectnum = 4;
                  if(!passed) yyless(0);
                  else push_state(YYSTATE, SECT4, "SECT4-2");
                  return(return_sect_token(passed, old_sect, sectnum));
                }
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 225 "scanner.l"
push_state(YYSTATE, CODEBLOCK, "CODEBLOCK");
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 226 "scanner.l"
push_state(YYSTATE, COMMENT, "COMMENT"); yymore();
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 227 "scanner.l"
++yylineno; ACTION_ECHO;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 228 "scanner.l"
{ if(yyleng == 1) sscanf(yytext, "%d", &lvalp->i);
	          else {
		    if(strcasecmp(yytext, "yes")==0) lvalp->i = 1;
		    else lvalp->i = 0;
                  }
                  return BOOLTOK; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 234 "scanner.l"
{ 
	        yylineno++;
		push_state(YYSTATE, CODEBLOCK, "CODEBLOCK");
		fprintf(module_def.fmtfp, "#line %d \"%s\"\n",
					  yylineno, module_def.filename);
		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 240 "scanner.l"
{
	        yylineno++;
		push_state(YYSTATE, MODINITIAL, "MODINITIAL");
		fprintf(module_def.fmtfp, "#line %d \"%s\"\n",
	                               	  yylineno, module_def.filename);
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 246 "scanner.l"
/* discard */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 247 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 249 "scanner.l"
{ return '='; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 250 "scanner.l"
{ return ';'; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 251 "scanner.l"
{ return ','; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 253 "scanner.l"
{ do_return++; 
                  lvalp->sv.lineno = yylineno;
                  push_state(YYSTATE, STRING, "string");
                }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 258 "scanner.l"
{
	          lvalp->name = strdup(yytext);
                  return NAME;
                }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 262 "scanner.l"
{
	          lvalp->name = strdup(yytext);
                  return FILENAME;
                }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 269 "scanner.l"
{
                   char * s, *t;

                   yylineno++;
		   pop_state();
		   s = t = lvalp->name = dupyytext();
		   while (*yytext)
		   {
		     if (*yytext == '\\') yytext++;
		     *s++ = *yytext++;
		   }
		   if(s-t>2 && *(s-1)=='}' && *(s-2)=='%') *(s-2)='\0';
		   return MCCODETOK;
                 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 283 "scanner.l"
{ yylineno++; yymore(); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 284 "scanner.l"
{ yymore(); }
	YY_BREAK


case 24:
YY_RULE_SETUP
#line 287 "scanner.l"
{
	           yylineno++;
		   pop_state();
                 }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 291 "scanner.l"
{ yylineno++; 
	           lvalp->name = yytext;
		   return CODEPART; }
	YY_BREAK


case 26:
YY_RULE_SETUP
#line 296 "scanner.l"
{ yylineno++; yymore(); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 297 "scanner.l"
{ yymore(); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 298 "scanner.l"
{ yymore(); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 299 "scanner.l"
{ yymore(); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 300 "scanner.l"
{
                    char * s, *t;
                    pop_state();
	            if(do_return) {
                      s = t = lvalp->sv.string = dupyytext();
                      while (*yytext)
                      {
                        if (*yytext == '\\') yytext++;
                        *s++ = *yytext++;
                      }
		      *s++ = *yytext++;
		      do_return = 0;
		      return MSTRINGTOK;
                    } else {
		      do_return = 0;
                      yymore();
                    }
		  }
	YY_BREAK


case 31:
YY_RULE_SETUP
#line 321 "scanner.l"
ACTION_ECHO; pop_state(); yymore();
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 322 "scanner.l"
yymore();
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 323 "scanner.l"
{ yylineno++; yymore(); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 324 "scanner.l"
{ yymore(); }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 328 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 329 "scanner.l"
/* ignore */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 330 "scanner.l"
/* ignore */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 331 "scanner.l"
push_state(YYSTATE, COMMENT, "COMMENT"); yymore();
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 332 "scanner.l"
++yylineno; ACTION_ECHO; 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 333 "scanner.l"
{
                  brace1 = 0; /* { */
                  brace2 = 0; /* ( */
                  brace3 = 0; /* [ */
	          push_state(YYSTATE, PROCDECL, "PROCDECL");
		  return PROCDECLTOK;
                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 340 "scanner.l"
{
#if DEBUG > 1
	          printf(">>>EXAMPLE\n");
#endif
                  brace1 = 0; /* { */
                  brace2 = 0; /* ( */
                  brace3 = 0; /* [ */
	            push_state(YYSTATE, EXAMPLE, "EXAMPLE");
		        return EXAMPLETOK;
                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 350 "scanner.l"
{ return STATICTOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 351 "scanner.l"
{ printf("SG(%d) <<<'%s' ", yylineno, yytext); }
	YY_BREAK


case 44:
YY_RULE_SETUP
#line 355 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 356 "scanner.l"
/* ignore */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 357 "scanner.l"
/* ignore */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 358 "scanner.l"
push_state(YYSTATE, COMMENT, "COMMENT"); yymore();
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 359 "scanner.l"
++yylineno; ACTION_ECHO; 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 360 "scanner.l"
{
#if DEBUG > 1
	          printf(">>>EXAMPLE\n");
#endif
                  brace1 = 0; /* { */
                  brace2 = 0; /* ( */
                  brace3 = 0; /* [ */
	          push_state(YYSTATE, EXAMPLE, "EXAMPLE");
		  return EXAMPLETOK;
                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 370 "scanner.l"
{ return STATICTOK; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 371 "scanner.l"
{ 
	           int i,tok;
#if DEBUG > 1
	           printf("(%d) VAR: %s\n", yylineno, yytext);
#endif
		   i = IsCmd(yytext, tok);
#if DEBUG > 1
		   printf("Res=%d, %d => %s\n", i, tok,
			  i ? "VARTYPETOK" : "NAME");
#endif
		   if(i) {
		     lvalp->tp.name = strdup(yytext);
		     lvalp->tp.typ = tok;
		     push_state(YYSTATE, PROCDECL, "PROCDECL");
		     return VARTYPETOK;
		   }
		   else {
		     //do_return++;
		     lvalp->name = strdup(yytext);
		     push_state(YYSTATE, PROCDECL, "PROCDECL");
		     return NAME;
		   }
                 }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 394 "scanner.l"
{ printf("PR(%d) <<<'%s' ", yylineno, yytext); }
	YY_BREAK


case 53:
YY_RULE_SETUP
#line 398 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 399 "scanner.l"
/* ignore */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 400 "scanner.l"
{ brace1++;
		  switch_state(YYSTATE, CODEBLOCK2, "CODEBLOCK2");
		  return '{';
		}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 404 "scanner.l"
{ printf("ERROR <<<'%s' ", yytext); }
	YY_BREAK


case 57:
YY_RULE_SETUP
#line 408 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 409 "scanner.l"
{ lvalp->name = yytext; 
	          return CODEPART; }
	YY_BREAK
case YY_STATE_EOF(SECT4):
#line 412 "scanner.l"
{ sectnum = 0;
	           iseof=1;
		   lvalp->name = yytext;
	           return SECT4END;
                   /* yyterminate(); */
                 }
	YY_BREAK


case 59:
YY_RULE_SETUP
#line 421 "scanner.l"
{ brace1++;
		   switch_state(YYSTATE, CODEBLOCK2, "CODEBLOCK2");
		   return '{';
		 }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 425 "scanner.l"
push_state(YYSTATE, COMMENT, "COMMENT");yymore();
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 426 "scanner.l"
++yylineno; ACTION_ECHO; 
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 427 "scanner.l"
{ do_return++; 
	           lvalp->sv.lineno = yylineno;
                   push_state(YYSTATE, STRING, "string"); 
                 }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 431 "scanner.l"
{ if(yyleng == 1) sscanf(yytext, "%d", &lvalp->i);
	           else {
		     if(strcasecmp(yytext, "yes")==0) lvalp->i = 1;
		     else lvalp->i = 0;
                   }
                   return BOOLTOK; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 437 "scanner.l"
{ sscanf(yytext, "%d", &lvalp->i); return NUMTOK; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 438 "scanner.l"
{ 
	           int i,tok;
#if DEBUG > 1
	           printf("(%d) VAR: %s\n", yylineno, yytext);
#endif
		   i = IsCmd(yytext, tok);
#if DEBUG > 1
		   printf("Res=%d, %d => %s\n", i, tok,
			  i ? "VARTYPETOK" : "NAME");
#endif
		   if(i) {
		     lvalp->tp.name = strdup(yytext);
		     lvalp->tp.typ = tok;
		     return VARTYPETOK;
		   }
		   else {
		     //do_return++;
		     lvalp->name = strdup(yytext);
		     return NAME;
		   }
                 }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 459 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 460 "scanner.l"
{ return '('; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 461 "scanner.l"
{ return ')'; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 462 "scanner.l"
{ return ','; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 463 "scanner.l"
{ return '#'; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 464 "scanner.l"
{ return '='; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 465 "scanner.l"
{ return ';'; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 466 "scanner.l"
{ }
	YY_BREAK


case 74:
YY_RULE_SETUP
#line 471 "scanner.l"
{ ACTION_ECHO;
                        pop_state();
                        lvalp->name = yytext;
                        return CMTPART;
                	yymore();
                      }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 477 "scanner.l"
yymore();
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 478 "scanner.l"
{ yylineno++; yymore(); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 479 "scanner.l"
{ yymore(); }
	YY_BREAK


case 78:
YY_RULE_SETUP
#line 483 "scanner.l"
push_state(YYSTATE, COMMENT, "COMMENT"); yymore();
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 484 "scanner.l"
{ yylineno++; lvalp->name = yytext; return CODEPART; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 485 "scanner.l"
{ 
	           lvalp->sv.lineno = yylineno;
                   push_state(YYSTATE, STRING, "string"); yymore();}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 488 "scanner.l"
{ brace1++; yymore();}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 489 "scanner.l"
{ brace1--;
                   if(brace1<=0) {
                     char * s, *t;

		     pop_state();
#if 0
		     s = t = lvalp->name = dupyytext();
		     while (*yytext)
		     {
		       if (*yytext == '\\') yytext++;
		       *s++ = *yytext++;
		     }
		     if(s-t>2 && *(s-1)=='}' && *(s-2)=='%') *(s-2)='\0';
#else
                     lvalp->name = yytext;
#endif
#if DEBUG > 1
                     printf("2 BRACE DOWN=%d\n", brace1);
#endif
		     return MCODETOK;
                   } else {
                     yymore();
		   }
                 }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 513 "scanner.l"
{ yylineno++; lvalp->name = yytext; return CODEPART; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 514 "scanner.l"
{ push_state(YYSTATE, PROCCMDBLOCK, "PROCCMDBLOCK");
               procedure_decl.flags.start_of_code = 1;
               return '%'; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 517 "scanner.l"
{ yymore(); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 518 "scanner.l"
{ yymore(); procedure_decl.flags.start_of_code = 1; }
	YY_BREAK


case 87:
YY_RULE_SETUP
#line 523 "scanner.l"
{ pop_state(); return ';'; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 524 "scanner.l"
{ return '('; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 525 "scanner.l"
{ return ')'; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 526 "scanner.l"
{ return ','; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 527 "scanner.l"
/* ignore */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 528 "scanner.l"
{ lvalp->name = strdup(yytext); return NAME; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 529 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 530 "scanner.l"
{ return MCOLONCOLON; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 531 "scanner.l"
{ switch_state(YYSTATE, ANYLINE, "ANYLINE"); return MEQUAL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 532 "scanner.l"
{ printf("PCB: '%s'\n", yytext); }
	YY_BREAK


case 97:
YY_RULE_SETUP
#line 536 "scanner.l"
{ lvalp->name = yytext; 
                pop_state();
                return ANYTOK; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 539 "scanner.l"
{ yylineno++; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 540 "scanner.l"
{ yymore(); }
	YY_BREAK

case 100:
YY_RULE_SETUP
#line 543 "scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
case YY_STATE_EOF(preamble):
case YY_STATE_EOF(MODINITIAL):
case YY_STATE_EOF(PROCCMDBLOCK):
case YY_STATE_EOF(CODEBLOCK):
case YY_STATE_EOF(CODEBLOCK2):
case YY_STATE_EOF(module):
case YY_STATE_EOF(SECT2):
case YY_STATE_EOF(SECT3):
case YY_STATE_EOF(PROCDECL):
case YY_STATE_EOF(EXAMPLE):
case YY_STATE_EOF(ANYLINE):
case YY_STATE_EOF(pdef):
case YY_STATE_EOF(procopt):
case YY_STATE_EOF(procdef):
case YY_STATE_EOF(ctext):
case YY_STATE_EOF(cstring):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 384 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 384 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 383);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 543 "scanner.l"

/*
        [^*\n]+         ++yylineno; yymore(); /*ACTION_ECHO;* /
        [^*\n]*{NL}     ++yylineno; yymore(); /*ACTION_ECHO;* /
         .*(\n?) { yylineno++; lvalp->name = yytext; return CODEPART; }
*/

extern "C" {
  int yywrap() {
    return 1;
  }
}

int libread(FILE* f, char* buf, int max_size)
{ int rc;

  offset = ftell(f);
  rc  = fread( buf, 1, max_size, f );
#if YYLPDEBUG >2
  printf("fread: %d of %d\n", rc, max_size);
#endif
  yylp_buffer_start = buf;
  return rc;
}

void switch_state(int state, int new_state, char *name)
{
#if DEBUG > 2
  printf("====>SWITCH to new state %d/%d l=%d, [%s] at %d\n",
         state, new_state, state_level, name, yylineno);
#endif
  strncpy(old_states[state_level].name, name,
          sizeof(old_states[state_level].name));
  BEGIN(new_state);
}

void push_state(int state, int new_state, char *name)
{
  state_level++;
#if DEBUG > 2
  printf("====>PUSH to new state %d/%d l=%d, [%s] at %d\n",
         state, new_state, state_level, name, yylineno);
#endif
  if(state_level>=state_max) {
    state_max++;
    if(old_states == NULL)
      old_states = (struct _states *)malloc(sizeof(struct _states));
    else {
      old_states = (struct _states *)realloc(old_states,
                                             state_max*sizeof(struct _states));
    }
  }
  old_states[state_level].state = state;
  strncpy(old_states[state_level].name, name,
          sizeof(old_states[state_level].name));
  BEGIN(new_state);
}

void pop_state()
{
#if DEBUG > 2
  printf("====>Back to old state %d, l=%d [%s] at %d\n",
         old_states[state_level].state,
         state_level,
         (state_level>0) ? old_states[state_level-1].name : "INITIAL",
         yylineno);
#endif
  if(state_level<0) return;
  BEGIN(old_states[state_level].state);
  state_level--;
  if(state_level<0) state_level = -1;
}

int return_sect_token(
  int passed,
  int old_sect,
  int new_sect
  )
{
  if(passed) {
#if DEBUG
    printf("Go to section '%s' (%d)\n", sectname[new_sect], new_sect);
#endif
    switch(new_sect) {
        case 2: return SECT2START;
        case 3: return SECT3START;
        case 4: return SECT4START;
        default: return SECTEND;
    }
  } else {
#if DEBUG
    printf("End of section '%s' (%d)\n", sectname[old_sect], old_sect);
#endif
    switch(old_sect) {
        case 2: return SECT2END;
        case 3: return SECT3END;
        case 4: return SECT4END;
        default: return SECTEND;
    }
  }
}

void add_action(char *new_text)
{
  return;
  switch(sectnum) {
    case 1:
      printf("1>%s<#\n", new_text);
      break;
    case 2:
      printf("2>%s<#\n", new_text);
      break;
    case 3:
      printf("3>%s<#\n", new_text);
      break;
    case 4:
      printf("4>%s<#\n", new_text);
      break;
  }
}
