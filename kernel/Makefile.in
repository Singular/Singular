#################################################################
###
### Makefile for Singular
###
#################################################################

SHELL		= /bin/sh

##
## version
##
SINGULAR_VERSION	= @SINGULAR_VERSION@
SINGULAR		= @SINGULAR@
SINGUNAME		= @SINGUNAME@
##
## various paths
##
srcdir		= @srcdir@
prefix 		= @prefix@
exec_prefix 	= @exec_prefix@
libdir 		= @libdir@
# program executable goes here
bindir		= @bindir@
# includes are taken from here
includedir	= @includedir@
install_bindir  = ${install_prefix}/${SINGUNAME}

##
## various programs
##
@SET_MAKE@
CC		= @CC@
LD              = @LD@
CXX		= @CXX@
LEX		= @LEX@
PERL		= @PERL@
BISON		= bison
INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
MKINSTALLDIRS   = ./mkinstalldirs
LN_S		= @LN_S@

##
## compiler and linker options
##
PIPE		= @PIPE@
CFLAGS		= @CFLAGS@ ${PIPE} 
CXXFLAGS	= @CXXFLAGS@ ${PIPE} 
CXXTEMPLFLAGS	= @CXXTEMPLFLAGS@
CPPFLAGS	= -I${srcdir} -I.. -I@prefix@  @CPPFLAGS@ 
DEFS		= -DNDEBUG -DOM_NDEBUG -D@SING_UNAME@ @DEFS@
LDFLAGS		= @LDFLAGS@
LD_DYN_FLAGS	= @LD_DYN_FLAGS@
SFLAGS		= @SFLAGS@
SLDFLAGS	= @SLDFLAGS@

LD_LIBC	        = -lc
STATIC_LDFLAGS	= @STATIC_LDFLAGS@
# under cygwin, do not explicitly link against -lm, for it is the cygwin
# lib -- if you really want to do this, use -lm as the _last_ thing on the
# arguments to link
ifneq ($(SINGUNAME),ix86-Win)
LIBS		= -lm @NEED_LIBS@ 
else
# for the 2-0-* versions under Windows, we don't need gdbm, readline and ncurses
LIBS		= -lsingfac -lsingcf -lntl -lgmp -lreadline -lncurses -lomalloc_ndebug
#LIBS		= -lsingfac -lsingcf -lgmp
endif
MP_LIBS		= @MP_LIBS@

ifdef LD_STATIC
LDFLAGS  := ${STATIC_LDFLAGS} ${LDFLAGS} 
LIBS := ${MP_LIBS} ${LIBS}
DL_KERNEL =
else
LDFLAGS  := ${LD_DYN_FLAGS} ${LDFLAGS} 
DL_KERNEL	= @DL_KERNEL@
endif

# CXXFLAGS =  -g -Wall -Wno-unused
# CFLAGS =  -g -Wall -Wno-unused
##
## End configuration dependend stuff
#################################################################

###
### file sets
###

# normal C++ source files
CXXSOURCES=clapconv.cc \
    clapsing.cc \
    febase.cc feread.cc feResource.cc \
    ffields.cc hdegree.cc hilb.cc hutil.cc \
    sca.cc gring.cc gr_kstd2.cc summator.cc ncSAMult.cc ncSAFormula.cc \
    ideals.cc intvec.cc int64vec.cc \
    khstd.cc kstdfac.cc \
    kstd1.cc kstd2.cc kutil.cc \
    longalg.cc longrat.cc longrat0.cc \
    maps.cc matpol.cc misc.cc gnumpfl.cc gnumpc.cc \
    rmodulo2m.cc rmodulon.cc rintegers.cc \
    modulop.cc mpr_complex.cc sparsmat.cc fast_maps.cc \
    fglmzero.cc fglmvec.cc fglmgauss.cc fglmhom.cc fglmcomb.cc \
    numbers.cc polys.cc p_polys.cc polys0.cc polys1.cc polys-impl.cc \
    ring.cc shortfl.cc kspoly.cc \
    syz.cc syz0.cc syz1.cc syz2.cc syz3.cc\
    timer.cc weight.cc \
    GMPrat.cc multicnt.cc npolygon.cc semic.cc spectrum.cc splist.cc \
    mod_raw.cc walkProc.cc walkMain.cc walkSupport.cc\
    eigenval.cc units.cc kbuckets.cc sbuckets.cc\
    mpr_inout.cc mpr_base.cc mpr_numeric.cc \
    prCopy.cc p_Mult_q.cc \
    pDebug.cc pInline2.cc pInline1.cc pInline0.cc \
    pShallowCopyDelete.cc fast_mult.cc digitech.cc \
    tgb.cc tgbgauss.cc ringgb.cc f5data.cc f5lists.cc f5gb.cc \
    f5c.cc F5cLists.cc ratgring.cc shiftgb.cc gfan.cc \
    linearAlgebra.cc longtrans.cc
CXXSOURCES2	= SingularBuilder.cpp

# normal C source files
CSOURCES=weight0.c fegetopt.c fereadl.c dError.c mmstd.c

# C++ sources which are used if part of the kernel are dynamically linked
ifeq ($(DL_KERNEL),1)
DL_KERNEL_SOURCES=p_Procs_Dynamic.cc
else
DL_KERNEL_SOURCES=
endif

# C++ sources which are used for dynamic libraries if part of the kernel is
# dynamically linked
DL_LIB_SOURCES=p_Procs_Lib.cc

# C++ sources which are used if no parts of the kernel are dynamically linked
STATIC_SOURCES=p_Procs_Static.cc

# special C++ source files (need extra compiling and/or linking), for which
# dependencies should be generated
ESOURCES=mmalloc.cc $(DL_KERNEL_SOURCES) $(DL_LIB_SOURCES) $(STATIC_SOURCES)

SOURCES=${CSOURCES} ${CXXSOURCES} \
	prCopyTemplate.cc \
        p_Delete__T.cc p_ShallowCopyDelete__T.cc \
        p_Copy__T.cc p_Mult_nn__T.cc  pp_Mult_nn__T.cc \
        pp_Mult_mm__T.cc p_Mult_mm__T.cc \
        p_Minus_mm_Mult_qq__T.cc p_Add_q__T.cc \
	p_Neg__T.cc pp_Mult_Coeff_mm_DivSelect__T.cc \
	pp_Mult_Coeff_mm_DivSelectMult__T.cc \
	p_Merge_q__T.cc pp_Mult_mm_Noether__T.cc\
	p_kBucketSetLm__T.cc \
	kInline.cc

HEADERS=hutil.h idrec.h stairc.h ideals.h \
	longalg.h structs.h intvec.h int64vec.h longrat.h \
	numbers.h clapconv.h maps.h \
	clapsing.h matpol.h polys.h p_polys.h syz.h \
	ring.h timer.h dError.h fast_maps.h \
	febase.h shortfl.h mpr_complex.h mpr_global.h \
	summator.h ncSAMult.h ncSACache.h sca.h gring.h ncSAFormula.h \
	walkProc.h walkMain.h walkSupport.h\
	ffields.h khstd.h sparsmat.h gnumpfl.h gnumpc.h \
	fglm.h kstd1.h \
	rmodulo2m.h rmodulon.h rintegers.h modulop.h weight.h \
	fglmgauss.h fglmvec.h \
	kstdfac.h kmatrix.h\
	kutil.h \
	dbm_sl.h polys-impl.h \
        GMPrat.h multicnt.h npolygon.h semic.h spectrum.h splist.h multicnt.h \
	eigenval.h units.h mod_raw.h kbuckets.h sbuckets.h\
	mpr_global.h mpr_inout.h mpr_base.h mpr_numeric.h \
	fegetopt.h options.h \
	ratgring.h shiftgb.h prCopy.h prCopyMacros.h \
        p_MemAdd.h p_MemCopy.h p_MemCmp.h p_Numbers.h \
        pInline2.h pInline1.h pInline0.h mmalloc.h \
        pShallowCopyDelete.h \
	p_Procs_Dynamic.h p_Procs_Impl.h p_Procs_Set.h \
	p_Procs.h p_Procs_Static.h p_Mult_q.h gfan.h

DISTFILES=${SOURCES} ${HEADERS} ${ESOURCES} \
        Makefile.in \
	mod2.h.in testgh install-sh mkinstalldirs \
	prCopy.pl

OBJS := $(CXXSOURCES:.cc=.o) $(CSOURCES:.c=.o) #$(CXXSOURCES2:.cpp=.o)
OBJS2 := $(ESOURCES:.cc=.o)
OBJSG2 := $(ESOURCES:.cc=.og)
OBJSP2 := $(ESOURCES:.cc=.op)

P_PROCS_MODULES = FieldZp FieldIndep FieldQ FieldGeneral

ifeq ($(DL_KERNEL),1)
OBJS 	:= $(OBJS) $(DL_KERNEL_SOURCES:.cc=.o)
DL_LIBS := $(P_PROCS_MODULES:%=p_Procs_%.so)
else
ifndef LD_STATIC
LIBS := $(MP_LIBS) $(LIBS)
endif
OBJS := $(OBJS) $(STATIC_SOURCES:.cc=.o) 
DL_LIBS=
endif

##
## Build Targets
##
.cc.o:	
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} -c $<
.c.o:
	${CC} ${CFLAGS} ${CPPFLAGS} ${DEFS} -c $<

# building objects for shared libraries
p_Procs_Lib_%.dl_o : p_Procs_Lib.cc p_Procs_Dynamic.o 
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

DL_TAILG=\"sog\"
DL_TAILP=\"sop\"


OBJG= $(CXXSOURCES:.cc=.og) $(CSOURCES:.c=.og)

ifeq ($(DL_KERNEL),1)
OBJG 	:= $(OBJG) $(DL_KERNEL_SOURCES:.cc=.og)
OBJP 	:= $(OBJP) $(DL_KERNEL_SOURCES:.cc=.op)
DL_LIBSG := $(P_PROCS_MODULES:%=p_Procs_%.sog)
DL_LIBSP := $(P_PROCS_MODULES:%=p_Procs_%.sop)
else
OBJG := $(OBJG) $(STATIC_SOURCES:.cc=.og) 
OBJP := $(OBJP) $(STATIC_SOURCES:.cc=.op) 
DL_LIBSG=
DL_LIBSP=
endif

all:	libkernel.a libkernel_g.a mmalloc.o ${DL_LIBS} ${DL_LIBSG} ${OBJS2}

libkernel.a: ${OBJS}
	-rm -f libkernel.a
	ar cr $@ $^

p_Procs_Lib.o: p_Procs_Lib.inc

# Hmm compiling with -fomit-frame-pointer resulted in access violation
# under cygwin
prCopy.o prCopy.og prCopy.op: prCopy.inc

prCopy.inc : prCopyMacros.h prCopyTemplate.cc prCopy.pl
	$(PERL) prCopy.pl > prCopy.xx && mv prCopy.xx prCopy.inc

# additional dependencies for p_Procs_[Static|Dynamic|Lib].cc
p_Procs_Static.o p_Procs_Static.og p_Procs_Static.op: p_Procs_Static.inc
p_Procs_Static.inc: p_Procs_Static.h
p_Procs_Dynamic.o p_Procs_Lib.o p_Procs_Dynamic.og p_Procs_Lib.og\
  p_Procs_Dynamic.op p_Procs_Lib.op: p_Procs_Dynamic.inc
p_Procs_Dynamic.inc p_Procs_Lib.inc: p_Procs_Dynamic.h

# here is how p_Procs_[Static|Dynamic].inc is generated
p_Procs_Static.inc: p_Procs_Generate.cc p_Procs_Impl.h mod2.h
	$(CXX) $(CPPFLAGS) -g -Dp_Procs_Static p_Procs_Generate.cc -o p_Procs_Static
	./p_Procs_Static > p_Procs_Static.xx && mv p_Procs_Static.xx p_Procs_Static.inc
	-rm -f p_Procs_Static p_Procs_Static.exe

p_Procs_Dynamic.inc: p_Procs_Generate.cc p_Procs_Impl.h mod2.h
	$(CXX) $(CPPFLAGS) -g -Dp_Procs_Dynamic p_Procs_Generate.cc -o p_Procs_Dynamic
	./p_Procs_Dynamic > p_Procs_Dynamic.xx && mv p_Procs_Dynamic.xx p_Procs_Dynamic.inc
	-rm -f p_Procs_Dynamic p_Procs_Dynamic.exe

p_Procs_%.so: p_Procs_Lib_%.dl_o
	$(LD) ${SLDFLAGS} -o $@ $^

##
## install targets
##
install-nolns: install

install-libsingular: install
	-${MKINSTALLDIRS} ${includedir}
	-${MKINSTALLDIRS} ${includedir}/singular
	-for file in *.h kInline.cc; do sed -e "s:<kernel/:<singular/:"< $$file | sed -e "s:<Singular/:<singular/:"|sed -e "s:<omalloc/:<:"|sed -e "s:<factory/:<:" > ${includedir}/singular/$$file; done

install: all installbin

install_all: install libkernel_p.a ${DL_LIBSP}
	- ranlib libkernel_p.a
ifeq (,${DL_LIBS})
else
ifeq (,${DL_LIBSP})
else
	-for file in ${DL_LIBSP}; do ${INSTALL_PROGRAM} $$file ../Singular; done
endif
endif


installbin: ${DL_LIBS} ${DL_LIBSG} libkernel.a libkernel_g.a
	${MKINSTALLDIRS} ${bindir}
	- ranlib libkernel.a
	- ranlib libkernel_g.a
ifeq (,${DL_LIBS})
else
	-${INSTALL_PROGRAM} ${DL_LIBS} ${bindir}
ifeq (,${DL_LIBSG})
else
	-for file in ${DL_LIBS} ${DL_LIBSG}; do ${INSTALL_PROGRAM} $$file ../Singular; done
endif
endif


install-bindist: ${DL_LIBS} libkernel.a
	${MKINSTALLDIRS} ${bindir}
ifeq (,${DL_LIBS})
else
	-${INSTALL_PROGRAM} ${DL_LIBS} ${bindir}
endif

##
## clean targest
##
mostlyclean: 
	-rm -f p_Procs_*.inc
	-rm -f *.o *.og core *.op p_Procs *.dl_o*

clean: mostlyclean
	-rm -f *.bak *.d *.dd depend *.a *.so*

distclean: clean
	-rm -f *~ .\#* 
	-rm -f mod2.h Makefile TAGS* tags config.status config.cache config.log

srcclean:
	@echo "This command is intended for maintainers to use;"
	@echo "Rebuilding the deleted files requires flex"
	@echo "bison, perl"

maintainer-clean: distclean srcclean
	@echo "This command is intended for maintainers to use;"
	@echo "Rebuilding the deleted files requires flex"
	@echo "bison, perl and autoconf"

##
## miscellanous targets
##

TAGS:   ${SOURCES} ${ESOURCES} ${HEADERS} 
	etags ${SOURCES} ${ESOURCES} ${HEADERS}

tags:   
	ctags *.c *.h *.cc *.inc

##
## Below here is stuff for developpers
#################################################################


##
## .og files for having -O and -g object versions available at the same time
##

OBJG1 := $(CXXSOURCES:.cc=.og) 
OBJG2 := $(CSOURCES:.c=.og) 

##
## compiler and linker options for debug version
##

CCG		= ${CC}
CXXG		= ${CXX}
CXXM		= gcc -MM -MG -DGENERATE_DEPEND
CCM		= gcc -MM -MG -DGENERATE_DEPEND

CFLAGSG		= -g ${PIPE}
CXXFLAGSG	= -g ${PIPE}
DEFSG		= -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILG)

##
## Debug Targets
##

p_Procs_%.sog: p_Procs_Lib_%.dl_og
	$(LD) ${SLDFLAGS} -o $@ $^

p_Procs_Lib_%.dl_og : p_Procs_Lib.cc  p_Procs_Dynamic.og
	${CXXG} ${CXXFLAGSG} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSG} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.og: %.cc
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSG} -c $< -o $@

$(OBJG2) : %.og: %.c
	$(CCG)  ${CFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

libkernel_g.a: ${OBJG} ${DL_LIBSG} ${OBJSG2}
	-rm -f libkernel_g.a
	ar cr $@ ${OBJG}

##
## .op files for profiling
##

OBJP1 := $(CXXSOURCES:.cc=.op) 
OBJP2 := $(CSOURCES:.c=.op) 

OBJP=$(OBJP1) $(OBJP2) 

ifeq ($(DL_KERNEL),1)
OBJP 	:= $(OBJP) $(DL_KERNEL_SOURCES:.cc=.op)
else
OBJP := $(OBJP) $(STATIC_SOURCES:.cc=.op) 
endif

##
## compiler and linker options for profiling version
##

CCP		= ${CC}
CXXP		= ${CXX}

CFLAGSP		= -g -pg -O ${PIPE}
CXXFLAGSP	= -g -pg -O ${PIPE}
DEFSP		= -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILP)

##
## Profiling Targets
##

p_Procs_%.sop: p_Procs_Lib_%.dl_op 
	${CXXP} ${CXXFLAGSP} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_op : p_Procs_Lib.cc  p_Procs_Dynamic.op
	${CXXP} ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSP} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.op: %.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSP} -c $< -o $@

$(OBJP2) : %.op: %.c
	$(CCP)  ${CFLAGSP} ${CPPFLAGS} ${DEFSP} -c $< -o $@

libkernel_p.a: ${OBJP} ${DL_LIBSP} ${OBJSP2}
	-rm -f libkernel_p.a
	ar cr $@ ${OBJP}

##
## dependencies
##

%.dd: %.cc mod2.h 
	echo $(@:.dd=.og) $(@:.dd=.op) $(@:.dd=.dl_o) $(@:.dd=.dl_og) $(@:.dd=.dl_op)" " \\ > $@
	$(CXXM) -DGENTABLE ${CPPFLAGS} ${DEFSG} $< >> $@

%.d: %.c mod2.h 
	echo $(@:.d=.og) $(@:.d=.op) " " \\ > $@
	$(CCM) ${CPPFLAGS} ${DEFSG} $< >> $@

depend:   $(CXXSOURCES:.cc=.dd) $(ESOURCES:.cc=.dd) $(CSOURCES:.c=.d) mod2.h
	cat *.d *.dd >depend

ifeq (depend,$(wildcard depend))
include depend
endif


