/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
static yyconst short int yy_accept[171] =
    {   0,
        0,    0,    0,    0,   30,   30,    0,    0,    0,    0,
        0,    0,   20,   20,    0,    0,   67,   65,   40,   40,
       50,   34,   64,   59,   65,   64,   65,   65,   65,   65,
       65,   57,   65,   65,   65,   65,    6,   55,   64,   64,
       64,   64,   64,   64,   64,   24,   65,   35,   64,   36,
       39,   36,   30,   25,   30,   32,   33,   26,   29,   26,
       13,   11,   12,   15,   14,   17,   16,   21,   20,   21,
       18,   23,   19,    9,   66,   10,   51,   46,   64,   64,
       64,   53,   44,   43,   54,   41,   61,    3,    1,   61,
        0,    0,   57,   42,   48,   52,   45,   49,    6,   64,

       64,   64,   64,   64,   64,   64,   47,    2,   38,   37,
       30,   30,   28,   27,   21,   20,   21,    0,   21,    9,
        0,    1,   61,   63,   61,   63,   58,   64,   64,    5,
       64,   64,   64,   64,   64,    2,   30,   31,   22,    0,
        0,    0,   64,   64,    6,   64,   64,   64,   61,   62,
        0,   64,    0,   60,   64,    0,    4,   64,   64,    0,
        0,    7,   56,    0,    0,    8,    0,    0,    7,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,   26,    1,    1,   27,    1,   28,   10,   29,   10,

       30,   31,   10,   32,   33,   10,   10,   34,   35,   36,
       37,   38,   39,   40,   10,   41,   42,   10,   43,   44,
       10,   10,   45,   46,   47,   48,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    1,    5,
        6,    7,    1,    1,    7,    1,    8,    9,   10,    1,
       11,    1,    1,    1,    1,    1,   12,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    4,    1,    4,    1
    } ;

static yyconst short int yy_base[192] =
    {   0,
        0,  299,   43,   44,   45,   46,   47,   48,   50,   54,
      295,  294,   74,   92,   75,   76,  296,  561,  561,  561,
      269,  561,  561,  561,  267,   40,  250,  229,   84,   38,
       69,   92,  221,   60,  194,  181,   99,  561,   86,   87,
       93,   98,   99,  100,  102,  561,  154,  561,  177,  561,
      561,   62,    0,  561,  158,  561,  561,  561,  561,  109,
      561,  561,  561,  561,  561,  561,  561,    0,  129,  134,
      561,  561,  561,    0,  561,  561,  561,  561,  114,  124,
      125,  561,  561,  561,  561,  561,  128,  561,    0,  136,
      129,  149,  143,  561,  561,  561,  561,  561,  154,  144,

      146,  147,  148,  151,  136,  151,  561,    0,  561,  561,
        0,  177,  561,  561,    0,  187,  190,  144,    0,    0,
      171,    0,  180,  561,  176,  193,  193,  180,  186,  188,
      190,  192,  201,  203,  204,    0,  236,    0,  561,  119,
      103,   97,  207,  244,  246,  222,  231,  223,   80,   39,
      243,  224,  266,  561,  238,  252,  242,  252,  256,  286,
       70,  288,  245,  192,  291,  561,  292,  293,  296,  561,
      320,  332,  344,  356,  368,  380,  392,  400,  408,  418,
      430,  442,  454,  466,  478,  490,  502,  514,  526,  537,
      548

    } ;

static yyconst short int yy_def[192] =
    {   0,
      170,    1,  171,  171,  172,  172,  173,  173,  174,  174,
      175,  175,  176,  176,  177,  177,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  178,  170,  170,  170,  170,
      170,  179,  170,  170,  170,  170,  170,  170,  178,  178,
      178,  178,  178,  178,  178,  170,  170,  170,  170,  170,
      170,  170,  180,  170,  180,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  181,  170,  182,
      170,  170,  170,  183,  170,  170,  170,  170,  178,  178,
      178,  170,  170,  170,  170,  170,  170,  170,  184,  179,
      185,  170,  179,  170,  170,  170,  170,  170,  170,  178,

      178,  178,  178,  178,  100,  100,  170,  186,  170,  170,
      180,  187,  170,  170,  181,  170,  182,  188,  181,  183,
      170,  184,  179,  170,  170,  170,  179,  100,  100,  100,
      100,  100,  100,  100,  100,  186,  187,  189,  170,  170,
      170,  170,  100,  100,  144,  100,  100,  100,  170,  170,
      179,  100,  170,  170,  100,  190,  100,  100,  100,  191,
      170,  144,  100,  170,  191,  170,  191,  191,  170,    0,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170

    } ;

static yyconst short int yy_nxt[610] =
    {   0,
       18,   19,   20,   19,   21,   22,   23,   24,   25,   26,
       18,   18,   27,   28,   18,   29,   30,   31,   32,   33,
       18,   34,   35,   36,   37,   38,   23,   26,   26,   39,
       40,   41,   26,   26,   26,   42,   26,   43,   44,   26,
       26,   26,   45,   26,   46,   47,   18,   48,   51,   51,
       54,   54,   59,   59,   86,   62,   87,  150,   80,   62,
       63,   64,   55,   55,   63,   64,   81,  109,   52,   52,
       65,  164,   60,   60,   65,   69,   69,   75,   75,   70,
      166,   88,   95,   96,   71,   72,   89,  110,   73,   56,
       56,   57,   57,   69,   69,   76,   76,   70,  149,   84,

       99,   99,   71,   72,   80,   80,   73,   85,   91,   92,
       93,   80,   81,   81,  113,  151,   80,   80,   80,   81,
       80,  150,  102,  101,   81,   81,   81,  103,   81,  100,
      116,  116,   80,  106,  114,  118,  118,  149,  104,  119,
       81,  105,   80,   80,  118,  118,   87,  125,  118,  139,
       81,   81,  170,  170,  123,   99,   99,  121,  126,   91,
       92,   93,   80,   79,   80,   80,   80,  127,  134,   80,
       81,  128,   81,   81,   81,  112,  129,   81,   79,  111,
      131,  108,  138,  135,  140,  130,  140,  133,  116,  116,
      132,  118,  118,  164,   87,  119,  170,  170,  123,  107,

      118,  118,  166,   98,  118,  121,  141,   79,  141,  170,
      142,  127,   79,   79,  143,   79,   97,   79,   79,   79,
       79,  138,   79,  138,   79,  146,  144,  145,   79,  147,
       79,   79,  156,   79,   79,   79,   79,  148,  111,   79,
       94,  138,   83,  144,  152,  153,  153,   99,   99,   79,
       79,   79,  157,  156,  155,   79,   79,  158,   79,  170,
      142,  151,   82,   79,  154,   79,  170,  153,  153,   79,
       79,   79,   79,  159,   79,   78,   79,   79,  161,   79,
      138,  162,  138,   79,   79,  163,  154,  164,   79,  169,
      169,   77,  164,  164,  164,  170,  166,  169,  169,   67,

       67,  166,  166,  166,  167,   49,  170,  170,  170,  167,
      167,  167,  168,  170,  170,  170,  170,  168,  168,  168,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   79,  170,  170,  170,  170,   79,
      170,   79,   90,  170,  170,   90,   90,   90,  111,  111,
      111,  170,  111,  111,  111,  111,  111,  111,  111,  111,
      115,  170,  170,  115,  115,  170,  170,  115,  115,  115,
      115,  115,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  120,  120,  170,  120,  120,  120,
      120,  120,  120,  120,  170,  120,  122,  122,  170,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  124,  124,
      124,  124,  124,  124,  124,  170,  124,  124,  124,  124,
      136,  136,  170,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  138,  138,  170,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  160,  170,
      170,  160,  170,  170,  170,  170,  170,  170,  160,  165,
      170,  170,  165,  165,  170,  170,  170,  165,  170,  165,
       17,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170
    } ;

static yyconst short int yy_chk[610] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    6,    7,    8,   30,    9,   30,  150,   26,   10,
        9,    9,    5,    6,   10,   10,   26,   52,    3,    4,
        9,  161,    7,    8,   10,   13,   13,   15,   16,   13,
      161,   31,   34,   34,   13,   13,   31,   52,   13,    5,
        6,    5,    6,   14,   14,   15,   16,   14,  149,   29,

       37,   37,   14,   14,   39,   40,   14,   29,   32,   32,
       32,   41,   39,   40,   60,  142,   42,   43,   44,   41,
       45,  141,   41,   40,   42,   43,   44,   42,   45,   39,
       69,   69,   79,   45,   60,   70,   70,  140,   43,   70,
       79,   44,   80,   81,   70,   70,   87,   91,   70,  118,
       80,   81,   90,   90,   90,   99,   99,   87,   91,   93,
       93,   93,  100,  105,  101,  102,  103,   92,  105,  104,
      100,  100,  101,  102,  103,   55,  100,  104,  106,  112,
      102,   49,  112,  106,  121,  101,  121,  104,  116,  116,
      103,  117,  117,  164,  125,  117,  123,  123,  123,   47,

      117,  117,  164,   36,  117,  125,  126,  128,  126,  127,
      127,  127,  128,  129,  128,  130,   35,  131,  129,  132,
      130,  112,  131,  112,  132,  132,  129,  131,  133,  133,
      134,  135,  147,  133,  143,  134,  135,  135,  137,  143,
       33,  137,   28,  134,  143,  144,  144,  145,  145,  146,
      148,  152,  148,  156,  146,  148,  152,  152,  147,  151,
      151,  151,   27,  147,  144,  155,  145,  153,  153,  157,
      155,  144,  163,  155,  157,   25,  144,  163,  156,  158,
      137,  158,  137,  159,  158,  159,  153,  160,  159,  162,
      162,   21,  165,  167,  168,   17,  160,  169,  169,   12,

       11,  165,  167,  168,  160,    2,    0,    0,  162,  165,
      167,  168,  160,    0,    0,    0,    0,  165,  167,  168,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  178,    0,    0,    0,    0,  178,
        0,  178,  179,    0,    0,  179,  179,  179,  180,  180,
      180,    0,  180,  180,  180,  180,  180,  180,  180,  180,
      181,    0,    0,  181,  181,    0,    0,  181,  181,  181,
      181,  181,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  183,  183,    0,  183,  183,  183,
      183,  183,  183,  183,    0,  183,  184,  184,    0,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  185,  185,
      185,  185,  185,  185,  185,    0,  185,  185,  185,  185,
      186,  186,    0,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  189,  189,    0,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  190,    0,
        0,  190,    0,    0,    0,    0,    0,    0,  190,  191,
        0,    0,  191,  191,    0,    0,    0,  191,    0,  191,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "<stdin>"
#define INITIAL 0
#line 2 "<stdin>"
/****************************************
*  Computer Algebra System SINGULAR     *
****************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include <kernel/mod2.h>
#include <omalloc/omalloc.h>
#include <Singular/tok.h>
#include <Singular/stype.h>
#include <Singular/ipshell.h>
#include <Singular/fevoices.h>
#include <kernel/oswrapper/feread.h>

int feReadLine(char* b, int l);
#define ALLOC(a) omAlloc((a))
#ifndef NEW_FLEX
#endif /* NEW_LEX */
int blocknest = 0;
extern char * yytext;
//extern unsigned char * yytext;
extern int yyleng;
extern int inerror;

// this is to  shadow the malloc/realloc
// used by yy_flex_malloc/yy_flex_realloc
// so that we can mark stuff as static
static void* my_malloc(size_t size)
{
  void* addr = omAlloc(size);
  omMarkAsStaticAddr(addr);
  return addr;
}

static void* my_realloc(void* addr, size_t size)
{
  void* new_addr = omRealloc(addr, size);
  omMarkAsStaticAddr(new_addr);
  return new_addr;
}
static void my_free(void* addr)
{
  omFree(addr);
}
#undef malloc
#define malloc my_malloc
#undef realloc
#define realloc my_realloc
#undef free
#define free my_free
static char * dupyytext()
{
  char* s;
  if (yyleng>0) yytext[yyleng-1] = '\0';
  s = omStrDup((char *)yytext);
  omMarkAsStaticAddr(s);
  return s;
}

static char * dupyytextNL()
{
  int i = yyleng;//strlen((char *)yytext);
  char * rc = (char*)omAlloc( 3 + i );
  omMarkAsStaticAddr(rc);
  if (i>0)
  {
    strncpy( rc, (char *)yytext, i-1 );
  }
  else
  {
    i++;
  }
  rc[i-1] = '\n';
  rc[i] = '\n';
  rc[i+1] = '\0';
  return rc;
}

  #undef YY_DECL
  #define YY_DECL int yylex(YYSTYPE* lvalp)

  #undef yywrap
  extern "C" {
  int yywrap() { return exitVoice(); }
  }

  #undef YY_INPUT
  #define YY_INPUT(buf,result,max_size) \
          result = feReadLine( (char *) (buf), (max_size) )

  #undef YY_USER_ACTION
  #define YY_USER_ACTION \
          if ((inerror==1)&&(*yytext>=' '))\
          { Print("   skipping text from `%s`",yytext);inerror=2; }

/* %start START */
#define YY_ALWAYS_INTERACTIVE 1
#define string 1

#define block 2

#define blockstr 3

#define brace 4

#define bracestr 5

#define bracket 6

#define asstring 7


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 121 "<stdin>"


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 171 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 561 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 122 "<stdin>"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "<stdin>"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "<stdin>"
{
                           yy_noeof=noeof_comment;
                           loop
                           {
                             register int c;
                             while ( (c = yyinput()) != '*' && c != EOF );
                             if ( c == '*' )
                             {
                               while ( (c = yyinput()) == '*' );
                               if ( c == '/' ) break; /* found the end */
                             }
                             else
                             {
                               break;
                             }
                           }
                           yy_noeof=0;
                         }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 142 "<stdin>"
{ prompt_char='.';
                           blocknest = 0; yy_noeof = noeof_brace; BEGIN(brace);
                           return WHILE_CMD;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 145 "<stdin>"
{ prompt_char='.';
                           blocknest = 0; yy_noeof = noeof_brace; BEGIN(brace);
                           return FOR_CMD;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 149 "<stdin>"
{ yy_noeof = noeof_asstring;
                           BEGIN(asstring);
                           return HELP_CMD;
                         }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 154 "<stdin>"
{ yy_noeof = noeof_asstring;
                           BEGIN(asstring);
                           return EXAMPLE_CMD;
                         }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 159 "<stdin>"
{
                           char c; char *cp;
                           lvalp->name = omStrDup(iiProcName((char *)yytext,c,cp));
                           yy_noeof = noeof_procname;
                           blocknest = 1;
                           BEGIN(brace);
                           return PROC_DEF;
                         }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 167 "<stdin>"
{
                           lvalp->name = omStrDup((char *)yytext);
                           yy_noeof = 0; BEGIN(INITIAL);
                           return STRINGTOK;
                         }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 172 "<stdin>"
{
                           yy_noeof = 0; BEGIN(INITIAL);
                           return *yytext;
                         }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 177 "<stdin>"
{
                           yy_noeof = noeof_string;
                           BEGIN(bracestr);
                           yymore();
                         }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 182 "<stdin>"
{ if (blocknest++) yymore(); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 183 "<stdin>"
{ if (blocknest) yymore(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 184 "<stdin>"
{
                           if (blocknest)
                           {
                             lvalp->name = dupyytext();
                             return STRINGTOK;
                           }
                         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 191 "<stdin>"
{
                           if (--blocknest <= 0)
                           {
                             yy_noeof = 0;
                             BEGIN(INITIAL);
                             lvalp->name = dupyytext();
                             return STRINGTOK;
                           }
                           yymore();
                         }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 201 "<stdin>"
{
                           yy_noeof = noeof_brace;
                           BEGIN(brace);
                           yymore();
                         }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 206 "<stdin>"
{ yymore(); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 207 "<stdin>"
{ return '('; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 208 "<stdin>"
{ return ','; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 209 "<stdin>"
{ ; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 210 "<stdin>"
{
                           lvalp->name = omStrDup((char *)yytext);
                           return STRINGTOK;
                         }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 214 "<stdin>"
{
                           lvalp->name = omStrDup((char *)yytext);
                           return STRINGTOK;
                         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 218 "<stdin>"
{
                           yy_noeof = 0; BEGIN(INITIAL);
                           return ')';
                         }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 223 "<stdin>"
{
                           yy_blocklineno = yylineno;
                           blocknest = 1;
                           yy_noeof = noeof_block;
                           BEGIN(block);
                         }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 229 "<stdin>"
{
                           yy_noeof = noeof_string;
                           BEGIN(blockstr);
                           yymore();
                         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 234 "<stdin>"
{ yymore(); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 235 "<stdin>"
{ yymore(); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 236 "<stdin>"
{ yymore(); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 237 "<stdin>"
{
                           yy_noeof = noeof_block;
                           BEGIN(block);
                           yymore();
                         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 242 "<stdin>"
{ yymore(); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 243 "<stdin>"
{ yymore(); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 244 "<stdin>"
{ blocknest++; yymore(); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 245 "<stdin>"
{
                           if (--blocknest <= 0)
                           {
                             BEGIN(INITIAL);
                             yy_noeof = 0;
                             lvalp->name = dupyytextNL();
                             return BLOCKTOK;
                           }
                           yymore();
                         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 255 "<stdin>"
{ BEGIN(string); yy_noeof = noeof_string;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 256 "<stdin>"
{ return SYS_BREAK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 257 "<stdin>"
{ yymore(); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 258 "<stdin>"
{ yymore(); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 259 "<stdin>"
{ yymore(); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 260 "<stdin>"
{
                           char * s;
                           yy_noeof = 0;
                           BEGIN(INITIAL);
                           s = lvalp->name = dupyytext();
                           while (*yytext)
                           {
                             if (*yytext == '\\') yytext++;
                             *s++ = *yytext++;
                           }
                           *s++ = *yytext++;
                           return STRINGTOK;
                         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 274 "<stdin>"
/* skip whitespace */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 275 "<stdin>"
{ return DOTDOT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 276 "<stdin>"
{ return COLONCOLON; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 277 "<stdin>"
{ return MINUSMINUS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 278 "<stdin>"
{ return PLUSPLUS  ; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 279 "<stdin>"
{ return EQUAL_EQUAL; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 280 "<stdin>"
{ lvalp->i='&'; return LOGIC_OP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 281 "<stdin>"
{ lvalp->i='|'; return LOGIC_OP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 282 "<stdin>"
{ lvalp->i=LE; return COMP_OP; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 283 "<stdin>"
{ lvalp->i=GE; return COMP_OP; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 284 "<stdin>"
{ return NOT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 285 "<stdin>"
{ return NOTEQUAL; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 286 "<stdin>"
{ return NOTEQUAL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 287 "<stdin>"
{ return '^'; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 288 "<stdin>"
{ return ARROW; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 289 "<stdin>"
{ return '\\'; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 290 "<stdin>"
{
                           lvalp->name = omStrDup("\n");
                           return STRINGTOK;
                         }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 294 "<stdin>"
{
                           lvalp->name = (char *)yytext;
                           return INT_CONST;
                         }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 298 "<stdin>"
{
                           lvalp->name = (char *)yytext;
                           return RINGVAR;
                         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 302 "<stdin>"
{
                           m2_end(-1);
                         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 305 "<stdin>"
{
                           #ifdef MM_STAT
                           mmStat(-500);
                           #endif
                           #ifdef OM_TRACK
			   #ifndef SING_NDEBUG
                             omPrintUsedTrackAddrs(stdout, 10);
                           #endif
                           #endif
                           m2_end(0);
                         }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 317 "<stdin>"
{
                           lvalp->name = (char *)yytext;
                           return RINGVAR;
                         }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 321 "<stdin>"
{
                           lvalp->name = (char *)yytext;
                           return RINGVAR;
                         }
	YY_BREAK
case 63:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "<stdin>"
{
                           lvalp->name = (char *)yytext;
                           return RINGVAR;
                         }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 330 "<stdin>"
{
                           /* {name} */
                           int rc=0;
                           if (yytext[strlen((char *)yytext)-1] == '\n')
                           {
                             yytext[strlen((char *)yytext)-1] = '\0';
                           }
                           if (yyleng > 1)
                           {
                             rc = IsCmd((char *)yytext,lvalp->i);
                             if (rc) return rc;
                           }
                           lvalp->name = omStrDup((char *)yytext);
                           return UNKNOWN_IDENT;
                         }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 346 "<stdin>"
{
                           /*if (*yytext == '\n') REJECT;*/
                           register char ch= *yytext;
                           lvalp->i = ch;
                           switch(ch)
                           {
                             /* case '&': */
                             case '|':
                               return LOGIC_OP;
                             /* case '/': */
                             case '%':
                             case '*':
                               return MULDIV_OP;
                             /* case '<': */
                             case '>':
                               return COMP_OP;
                             default:
                               break;
                            }
                            return ch;
                         }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 367 "<stdin>"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(string):
case YY_STATE_EOF(block):
case YY_STATE_EOF(blockstr):
case YY_STATE_EOF(brace):
case YY_STATE_EOF(bracestr):
case YY_STATE_EOF(bracket):
case YY_STATE_EOF(asstring):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 171 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 171 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 170);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 367 "<stdin>"


void * myynewbuffer()
{
  void * oldb = YY_CURRENT_BUFFER;
  yy_switch_to_buffer(yy_create_buffer(NULL, YY_BUF_SIZE));
  return oldb;
}

void myyoldbuffer(void * oldb)
{
  yy_delete_buffer(YY_CURRENT_BUFFER);
  yy_switch_to_buffer((YY_BUFFER_STATE)oldb);
  //yy_flush_buffer((YY_BUFFER_STATE)oldb);
}
